import requests_pkcs12
import time
import concurrent.futures
import xml.etree.ElementTree as ET
import os
import csv
from datetime import date
from datetime import datetime

def post_request_with_pfx(url, xml_body, username, password, pfx_file_path, pfx_password):
    """
    Realiza una solicitud POST a una URL usando autenticación y certificado.

    Args:
        url (str): La URL del endpoint.
        xml_body (str): El contenido XML del body de la solicitud.
        username (str): El nombre de usuario para la autenticación.
        password (str): La contraseña para la autenticación.
        pfx_file_path (str): Ruta al archivo del certificado (.p12).
        pfx_password (str): Contraseña del certificado.

    Returns:
        requests.Response: El objeto de respuesta de la solicitud.
    """

    headers = {
        "Content-Type": "text/xml",
        "SOAPAction": ""
    }

    response = requests_pkcs12.post(
        url, 
        headers=headers, 
        data=xml_body, 
        auth=(username, password), 
        pkcs12_filename=pfx_file_path,
        pkcs12_password=pfx_password,
        verify=True  # A veces es necesario deshabilitar la verificación, pero no es lo más seguro
    )

    return response

# Resto del código

matriz = [6206115,6206114,6206113,6206112,6206111,6206110,6206109,6206108,6206107,6206106,6206105,6206104,6206103,6206102,6206101,6206100,6206099,6206098,6206097,6206096,6206095,6206094,6206093,6206092,6206091,6206090,6206089,6206088,6206087,6206086,6206085,6206084,6206083,6206082,6206081,6206080,6206079,6206078,6206077,6206076,6206075,6206074,6206073,6206072,6206071,6206070,6206069,6206068,6206067,6206066,6206065,6206064,6206063,6206062,6206061,6206060,6206059,6206058,6206057,6206056,6206055,6206054,6206053,6206052,6206051,6206050,6206049,6206048,6206047,6206046,6206045,6206044,6206043,6206042,6206041,6206040,6206039,6206038,6206037,6206036,6206035,6206034,6206033,6206032,6206031,6206030,6206029,6206028,6206027,6206026,6206025,6206024,6206023,6206022,6206021,6206020,6206019,6206018,6206017,6206016,6206015,6206014,6206013,6206012,6206011,6206010,6206009,6206008,6206007,6206006,6206005,6206004,6206003,6206002,6206001,6206000,6205999,6205998,6205997,6205996,6205995,6205994,6205993,6205992,6205991,6205990,6205989,6205988,6205987,6205986,6205985,6205984,6205983,6205982,6205981,6205980,6205979,6205978,6205977,6205976,6205975,6205974,6205973,6205972,6205971,6205970,6205969,6205968,6205967,6205966,6205965,6205964,6205963,6205962,6205961,6205960,6205959,6205958,6205957,6205956,6205955,6205954,6205953,6205952,6205951,6205950,6205949,6205948,6205947,6205946,6205945,6205944,6205943,6205942,6205941,6205940,6205939,6205938,6205937,6205936,6205935,6205934,6205933,6205932,6205931,6205930,6205929,6205928,6205927,6205926,6205925,6205924,6205923,6205922,6205921,6205920,6205919,6205918,6205917,6205916,6205915,6205914,6205913,6205912,6205911,6205910,6205909,6205908,6205907,6205906,6205905,6205904,6205903,6205902,6205901,6205900,6205899,6205898,6205897,6205896,6205895,6205894,6205893,6205892,6205891,6205890,6205889,6205888,6205887,6205886,6205885,6205884,6205883,6205882,6205881,6205880,6205879,6205878,6205877,6205876,6205875,6205874,6205873,6205872,6205871,6205870,6205869,6205868,6205867,6205866,6205865,6205864,6205863,6205862,6205861,6205860,6205859,6205858,6205857,6205856,6205855,6205854,6205853,6205852,6205851,6205850,6205849,6205848,6205847,6205846,6205845,6205844,6205843,6205842,6205841,6205840,6205839,6205838,6205837,6205836,6205835,6205834,6205833,6205832,6205831,6205830,6205829,6205828,6205827,6205826,6205825,6205824,6205823,6205822,6205821,6205820,6205819,6205818,6205817,6205816,6205815,6205814,6205813,6205812,6205811,6205810,6205809,6205808,6205807,6205806,6205805,6205804,6205803,6205802,6205801,6205800,6205799,6205798,6205797,6205796,6205795,6205794,6205793,6205792,6205791,6205790,6205789,6205788,6205787,6205786,6205785,6205784,6205783,6205782,6205781,6205780,6205779,6205778,6205777,6205776,6205775,6205774,6205773,6205772,6205771,6205770,6205769,6205768,6205767,6205766,6205765,6205764,6205763,6205762,6205761,6205760,6205759,6205758,6205757,6205756,6205755,6205754,6205753,6205752,6205751,6205750,6205749,6205748,6205747,6205746,6205745,6205744,6205743,6205742,6205741,6205740,6205739,6205738,6205737,6205736,6205735,6205734,6205733,6205732,6205731,6205730,6205729,6205728,6205727,6205726,6205725,6205724,6205723,6205722,6205721,6205720,6205719,6205718,6205717,6205716,6205715,6205714,6205713,6205712,6205711,6205710,6205709,6205708,6205707,6205706,6205705,6205704,6205703,6205702,6205701,6205700,6205699,6205698,6205697,6205696,6205695,6205694,6205693,6205692,6205691,6205690,6205689,6205688,6205687,6205686,6205685,6205684,6205683,6205682,6205681,6205680,6205679,6205678,6205677,6205676,6205675,6205674,6205673,6205672,6205671,6205670,6205669,6205668,6205667,6205666,6205665,6205664,6205663,6205662,6205661,6205660,6205659,6205658,6205657,6205656,6205655,6205654,6205653,6205652,6205651,6205650,6205649,6205648,6205647,6205646,6205645,6205644,6205643,6205642,6205641,6205640,6205639,6205638,6205637,6205636,6205635,6205634,6205633,6205632,6205631,6205630,6205629,6205628,6205627,6205626,6205625,6205624,6205623,6205622,6205621,6205620,6205619,6205618,6205617,6205616,6205615,6205614,6205613,6205612,6205611,6205610,6205609,6205608,6205607,6205606,6205605,6205604,6205603,6205602,6205601,6205600,6205599,6205598,6205597,6205596,6205595,6205594,6205593,6205592,6205591,6205590,6205589,6205588,6205587,6205586,6205585,6205584,6205583,6205582,6205581,6205580,6205579,6205578,6205577,6205576,6205575,6205574,6205573,6205572,6205571,6205570,6205569,6205568,6205567,6205566,6205565,6205564,6205563,6205562,6205561,6205560,6205559,6205558,6205557,6205556,6205555,6205554,6205553,6205552,6205551,6205550,6205549,6205548,6205547,6205546,6205545,6205544,6205543,6205542,6205541,6205540,6205539,6205538,6205537,6205536,6205535,6205534,6205533,6205532,6205531,6205530,6205529,6205528,6205527,6205526,6205525,6205524,6205523,6205522,6205521,6205520,6205519,6205518,6205517,6205516,6205515,6205514,6205513,6205512,6205511,6205510,6205509,6205508,6205507,6205506,6205505,6205504,6205503,6205502,6205501,6205500,6205499,6205498,6205497,6205496,6205495,6205494,6205493,6205492,6205491,6205490,6205489,6205488,6205487,6205486,6205485,6205484,6205483,6205482,6205481,6205480,6205479,6205478,6205477,6205476,6205475,6205474,6205473,6205472,6205471,6205470,6205469,6205468,6205467,6205466,6205465,6205464,6205463,6205462,6205461,6205460,6205459,6205458,6205457,6205456,6205455,6205454,6205453,6205452,6205451,6205450,6205449,6205448,6205447,6205446,6205445,6205444,6205443,6205442,6205441,6205440,6205439,6205438,6205437,6205436,6205435,6205434,6205433,6205432,6205431,6205430,6205429,6205428,6205427,6205426,6205425,6205424,6205423,6205422,6205421,6205420,6205419,6205418,6205417,6205416,6205415,6205414,6205413,6205412,6205411,6205410,6205409,6205408,6205407,6205406,6205405,6205404,6205403,6205402,6205401,6205400,6205399,6205398,6205397,6205396,6205395,6205394,6205393,6205392,6205391,6205390,6205389,6205388,6205387,6205386,6205385,6205384,6205383,6205382,6205381,6205380,6205379,6205378,6205377,6205376,6205375,6205374,6205373,6205372,6205371,6205370,6205369,6205368,6205367,6205366,6205365,6205364,6205363,6205362,6205361,6205360,6205359,6205358,6205357,6205356,6205355,6205354,6205353,6205352,6205351,6205350,6205349,6205348,6205347,6205346,6205345,6205344,6205343,6205342,6205341,6205340,6205339,6205338,6205337,6205336,6205335,6205334,6205333,6205332,6205331,6205330,6205329,6205328,6205327,6205326,6205325,6205324,6205323,6205322,6205321,6205320,6205319,6205318,6205317,6205316,6205315,6205314,6205313,6205312,6205311,6205310,6205309,6205308,6205307,6205306,6205305,6205304,6205303,6205302,6205301,6205300,6205299,6205298,6205297,6205296,6205295,6205294,6205293,6205292,6205291,6205290,6205289,6205288,6205287,6205286,6205285,6205284,6205283,6205282,6205281,6205280,6205279,6205278,6205277,6205276,6205275,6205274,6205273,6205272,6205271,6205270,6205269,6205268,6205267,6205266,6205265,6205264,6205263,6205262,6205261,6205260,6205259,6205258,6205257,6205256,6205255,6205254,6205253,6205252,6205251,6205250,6205249,6205248,6205247,6205246,6205245,6205244,6205243,6205242,6205241,6205240,6205239]  # Puedes agregar más valores a la matriz

# baseURL = "https://test.ipg-online.com/mcsWebService"
# apiPassword = "tester02"
# apiUser = "WSIPG"
# CertPwd = 'IPGAPI'
# p12path = r'C:\Users\FISERV\Documents\p12_masivo\test\test.p12'

username = os.getlogin()
csv_exp=[]
sid=[]
mid=[]
dba=[]
tid=[]
#prosa=[]
baseURL = "https://www2.ipg-online.com/mcsWebService"
apiPassword = "z>GiE69~sh"
apiUser = "WST315869._.1"
CertPwd = 'password'
p12path = fr'C:\Users\FISERV\Documents\p12_masivo\fdmx\fdmx.p12'

inicio = time.time()

def generar_csv(matriz,username):
    encabezados = ['SID', 'MID','TID','DBA']
    # Obtener la fecha y hora actual
    fecha_hora_actual = datetime.now().strftime('%Y%m%d_%H%M%S')

    # Nombre del archivo con la fecha y hora actual
    nombre_archivo = f'respuestas_url_{fecha_hora_actual}.csv'

    # Obtener el nombre de usuario actual de Windows
    username = os.getlogin()

    # Construir la ruta completa del directorio de descargas
    ruta_descargas = fr'C:\Users\{username}\Downloads'

    # Comprobar si la carpeta de descargas existe, de lo contrario, crearla
    if not os.path.exists(ruta_descargas):
        os.makedirs(ruta_descargas)

    # Ruta completa del archivo CSV
    ruta_archivo = os.path.join(ruta_descargas, nombre_archivo)

    # Transponer la matriz para cambiar las filas por columnas
    matriz_transpuesta = list(map(list, zip(*matriz)))

    # Escribir los datos en el archivo CSV
    with open(ruta_archivo, 'w', newline='') as archivo:
        writer = csv.writer(archivo)

        # Escribir los encabezados
        writer.writerow(encabezados)

        # Escribir los datos de la matriz transpuesta
        writer.writerows(matriz_transpuesta)

    print(f'Archivo CSV generado: {ruta_archivo}')


def process_request(i):
    soap_xml = f'''   
    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mcs="http://www.ipg-online.com/mcsWebService">
        <soapenv:Header/>
        <soapenv:Body>
            <mcs:mcsRequest>
                <mcs:getStore>
                    <mcs:storeID>{i}</mcs:storeID>
                </mcs:getStore>
            </mcs:mcsRequest>
        </soapenv:Body>
        </soapenv:Envelope>
    '''
    resp = post_request_with_pfx(baseURL, soap_xml, apiUser, apiPassword, p12path, CertPwd)
    return i, resp

with concurrent.futures.ThreadPoolExecutor() as executor:
    results = list(executor.map(process_request, matriz))

for i, resp in results:
    root = ET.fromstring(resp.text)
    external_merchant_id_element = root.find(".//ns2:externalMerchantID", namespaces={"ns2": "http://www.ipg-online.com/mcsWebService"})
    dba_xml = root.find(".//ns2:dba", namespaces={"ns2": "http://www.ipg-online.com/mcsWebService"})
    #prosa_xml = root.find(".//ns2:item", namespaces={"ns2": "http://www.ipg-online.com/mcsWebService"})
    tid_xml = root.find(".//ns2:terminalID", namespaces={"ns2": "http://www.ipg-online.com/mcsWebService"})
    # Obtener el valor de merchantID
    if external_merchant_id_element is not None:
        external_merchant_id = external_merchant_id_element.text
        print("SID: ",i,"MID: ", external_merchant_id,'TID: ',tid_xml.text, "DBA: ",dba_xml.text)
        sid.append(i)
        mid.append(external_merchant_id)
        tid.append(tid_xml.text)
        dba.append(dba_xml.text)
        #prosa.append(prosa_xml.text)
    else:
        print("No se encontró el elemento externalMerchantID en el XML.")
        sid.append(i)
        mid.append("NO MID")
        tid.append("NO TID")
        dba.append("NO DBA")
        #prosa.append("NO PROSA")
        
csv_exp.append(sid)
csv_exp.append(mid)
csv_exp.append(tid)
csv_exp.append(dba)
#csv_exp.append(prosa)
generar_csv(csv_exp,username)    

tiempo_total = time.time() - inicio
print(f"Tiempo total de ejecución: {tiempo_total:.4f} segundos")
